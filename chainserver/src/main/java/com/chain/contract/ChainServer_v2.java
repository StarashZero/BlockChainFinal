package com.chain.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple5;
import org.fisco.bcos.web3j.tuples.generated.Tuple6;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class ChainServer_v2 extends Contract {
    public static String BINARY = "";

    public static final String ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"obligor\",\"type\":\"address\"},{\"name\":\"creditor\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"certifier\",\"type\":\"address\"}],\"name\":\"signRecipts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"rId\",\"type\":\"uint256\"}],\"name\":\"insertReceipt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receipts\",\"outputs\":[{\"name\":\"obligor\",\"type\":\"address\"},{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"certifier\",\"type\":\"address\"},{\"name\":\"firstBill\",\"type\":\"address\"},{\"name\":\"lastBill\",\"type\":\"address\"},{\"name\":\"isUsed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"selectReceipt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"company\",\"type\":\"address\"},{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"login\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"rId\",\"type\":\"uint256\"}],\"name\":\"insertBill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"company\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"password\",\"type\":\"string\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"isBank\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rId\",\"type\":\"uint256\"},{\"name\":\"creditor\",\"type\":\"address\"}],\"name\":\"getBillAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"insertName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"selectBill\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"rId\",\"type\":\"uint256\"}],\"name\":\"removeReceipt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rId\",\"type\":\"uint256\"},{\"name\":\"obligor\",\"type\":\"address\"}],\"name\":\"settle\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rId\",\"type\":\"uint256\"},{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"selectName\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"rId\",\"type\":\"uint256\"}],\"name\":\"removeBill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rId\",\"type\":\"uint256\"},{\"name\":\"bank\",\"type\":\"address\"},{\"name\":\"creditor\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"financing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"companys\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"password\",\"type\":\"string\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"isBank\",\"type\":\"bool\"},{\"name\":\"isUsed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"obligor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"creditor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"certifier\",\"type\":\"address\"}],\"name\":\"Sign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creditor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Finance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"uint256\"}],\"name\":\"Select\",\"type\":\"event\"}]";

    public static final String FUNC_SIGNRECIPTS = "signRecipts";

    public static final String FUNC_INSERTRECEIPT = "insertReceipt";

    public static final String FUNC_RECEIPTS = "receipts";

    public static final String FUNC_SELECTRECEIPT = "selectReceipt";

    public static final String FUNC_LOGIN = "login";

    public static final String FUNC_INSERTBILL = "insertBill";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_GETBILLAMOUNT = "getBillAmount";

    public static final String FUNC_INSERTNAME = "insertName";

    public static final String FUNC_SELECTBILL = "selectBill";

    public static final String FUNC_REMOVERECEIPT = "removeReceipt";

    public static final String FUNC_SETTLE = "settle";

    public static final String FUNC_TRANSFERPAYMENT = "transferPayment";

    public static final String FUNC_SELECTNAME = "selectName";

    public static final String FUNC_REMOVEBILL = "removeBill";

    public static final String FUNC_FINANCING = "financing";

    public static final String FUNC_COMPANYS = "companys";

    public static final Event SIGN_EVENT = new Event("Sign", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FINANCE_EVENT = new Event("Finance", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SELECT_EVENT = new Event("Select", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected ChainServer_v2(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ChainServer_v2(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ChainServer_v2(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ChainServer_v2(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> signRecipts(String obligor, String creditor, BigInteger amount, String certifier) {
        final Function function = new Function(
                FUNC_SIGNRECIPTS, 
                Arrays.<Type>asList(new Address(obligor),
                new Address(creditor),
                new Uint256(amount),
                new Address(certifier)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void signRecipts(String obligor, String creditor, BigInteger amount, String certifier, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SIGNRECIPTS, 
                Arrays.<Type>asList(new Address(obligor),
                new Address(creditor),
                new Uint256(amount),
                new Address(certifier)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String signReciptsSeq(String obligor, String creditor, BigInteger amount, String certifier) {
        final Function function = new Function(
                FUNC_SIGNRECIPTS, 
                Arrays.<Type>asList(new Address(obligor),
                new Address(creditor),
                new Uint256(amount),
                new Address(certifier)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> insertReceipt(String name, BigInteger rId) {
        final Function function = new Function(
                FUNC_INSERTRECEIPT, 
                Arrays.<Type>asList(new Utf8String(name),
                new Uint256(rId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void insertReceipt(String name, BigInteger rId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_INSERTRECEIPT, 
                Arrays.<Type>asList(new Utf8String(name),
                new Uint256(rId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String insertReceiptSeq(String name, BigInteger rId) {
        final Function function = new Function(
                FUNC_INSERTRECEIPT, 
                Arrays.<Type>asList(new Utf8String(name),
                new Uint256(rId)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple6<String, BigInteger, String, String, String, Boolean>> receipts(BigInteger param0) {
        final Function function = new Function(FUNC_RECEIPTS, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple6<String, BigInteger, String, String, String, Boolean>>(
                new Callable<Tuple6<String, BigInteger, String, String, String, Boolean>>() {
                    @Override
                    public Tuple6<String, BigInteger, String, String, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, BigInteger, String, String, String, Boolean>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (Boolean) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<BigInteger, List<BigInteger>>> selectReceipt(String name) {
        final Function function = new Function(FUNC_SELECTRECEIPT, 
                Arrays.<Type>asList(new Utf8String(name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<BigInteger, List<BigInteger>>>(
                new Callable<Tuple2<BigInteger, List<BigInteger>>>() {
                    @Override
                    public Tuple2<BigInteger, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, List<BigInteger>>(
                                (BigInteger) results.get(0).getValue(), 
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> login(String company, String password) {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new Address(company),
                new Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void login(String company, String password, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new Address(company),
                new Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String loginSeq(String company, String password) {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new Address(company),
                new Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> insertBill(String name, BigInteger rId) {
        final Function function = new Function(
                FUNC_INSERTBILL, 
                Arrays.<Type>asList(new Utf8String(name),
                new Uint256(rId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void insertBill(String name, BigInteger rId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_INSERTBILL, 
                Arrays.<Type>asList(new Utf8String(name),
                new Uint256(rId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String insertBillSeq(String name, BigInteger rId) {
        final Function function = new Function(
                FUNC_INSERTBILL, 
                Arrays.<Type>asList(new Utf8String(name),
                new Uint256(rId)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> register(String company, String name, String password, BigInteger balance, Boolean isBank) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Address(company),
                new Utf8String(name),
                new Utf8String(password),
                new Uint256(balance),
                new Bool(isBank)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void register(String company, String name, String password, BigInteger balance, Boolean isBank, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Address(company),
                new Utf8String(name),
                new Utf8String(password),
                new Uint256(balance),
                new Bool(isBank)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerSeq(String company, String name, String password, BigInteger balance, Boolean isBank) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Address(company),
                new Utf8String(name),
                new Utf8String(password),
                new Uint256(balance),
                new Bool(isBank)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> getBillAmount(BigInteger rId, String creditor) {
        final Function function = new Function(
                FUNC_GETBILLAMOUNT, 
                Arrays.<Type>asList(new Uint256(rId),
                new Address(creditor)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getBillAmount(BigInteger rId, String creditor, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETBILLAMOUNT, 
                Arrays.<Type>asList(new Uint256(rId),
                new Address(creditor)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getBillAmountSeq(BigInteger rId, String creditor) {
        final Function function = new Function(
                FUNC_GETBILLAMOUNT, 
                Arrays.<Type>asList(new Uint256(rId),
                new Address(creditor)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> insertName(String name, String addr) {
        final Function function = new Function(
                FUNC_INSERTNAME, 
                Arrays.<Type>asList(new Utf8String(name),
                new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void insertName(String name, String addr, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_INSERTNAME, 
                Arrays.<Type>asList(new Utf8String(name),
                new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String insertNameSeq(String name, String addr) {
        final Function function = new Function(
                FUNC_INSERTNAME, 
                Arrays.<Type>asList(new Utf8String(name),
                new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple2<BigInteger, List<BigInteger>>> selectBill(String name) {
        final Function function = new Function(FUNC_SELECTBILL, 
                Arrays.<Type>asList(new Utf8String(name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<BigInteger, List<BigInteger>>>(
                new Callable<Tuple2<BigInteger, List<BigInteger>>>() {
                    @Override
                    public Tuple2<BigInteger, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, List<BigInteger>>(
                                (BigInteger) results.get(0).getValue(), 
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> removeReceipt(String name, BigInteger rId) {
        final Function function = new Function(
                FUNC_REMOVERECEIPT, 
                Arrays.<Type>asList(new Utf8String(name),
                new Uint256(rId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void removeReceipt(String name, BigInteger rId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REMOVERECEIPT, 
                Arrays.<Type>asList(new Utf8String(name),
                new Uint256(rId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String removeReceiptSeq(String name, BigInteger rId) {
        final Function function = new Function(
                FUNC_REMOVERECEIPT, 
                Arrays.<Type>asList(new Utf8String(name),
                new Uint256(rId)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> settle(BigInteger rId, String obligor) {
        final Function function = new Function(
                FUNC_SETTLE, 
                Arrays.<Type>asList(new Uint256(rId),
                new Address(obligor)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void settle(BigInteger rId, String obligor, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETTLE, 
                Arrays.<Type>asList(new Uint256(rId),
                new Address(obligor)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String settleSeq(BigInteger rId, String obligor) {
        final Function function = new Function(
                FUNC_SETTLE, 
                Arrays.<Type>asList(new Uint256(rId),
                new Address(obligor)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> transferPayment(BigInteger rId, String sender, String receiver, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFERPAYMENT, 
                Arrays.<Type>asList(new Uint256(rId),
                new Address(sender),
                new Address(receiver),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void transferPayment(BigInteger rId, String sender, String receiver, BigInteger amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERPAYMENT, 
                Arrays.<Type>asList(new Uint256(rId),
                new Address(sender),
                new Address(receiver),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String transferPaymentSeq(BigInteger rId, String sender, String receiver, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFERPAYMENT, 
                Arrays.<Type>asList(new Uint256(rId),
                new Address(sender),
                new Address(receiver),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple2<BigInteger, List<String>>> selectName(String name) {
        final Function function = new Function(FUNC_SELECTNAME, 
                Arrays.<Type>asList(new Utf8String(name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple2<BigInteger, List<String>>>(
                new Callable<Tuple2<BigInteger, List<String>>>() {
                    @Override
                    public Tuple2<BigInteger, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, List<String>>(
                                (BigInteger) results.get(0).getValue(), 
                                convertToNative((List<Address>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> removeBill(String name, BigInteger rId) {
        final Function function = new Function(
                FUNC_REMOVEBILL, 
                Arrays.<Type>asList(new Utf8String(name),
                new Uint256(rId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void removeBill(String name, BigInteger rId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEBILL, 
                Arrays.<Type>asList(new Utf8String(name),
                new Uint256(rId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String removeBillSeq(String name, BigInteger rId) {
        final Function function = new Function(
                FUNC_REMOVEBILL, 
                Arrays.<Type>asList(new Utf8String(name),
                new Uint256(rId)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<TransactionReceipt> financing(BigInteger rId, String bank, String creditor, BigInteger amount) {
        final Function function = new Function(
                FUNC_FINANCING, 
                Arrays.<Type>asList(new Uint256(rId),
                new Address(bank),
                new Address(creditor),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void financing(BigInteger rId, String bank, String creditor, BigInteger amount, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_FINANCING, 
                Arrays.<Type>asList(new Uint256(rId),
                new Address(bank),
                new Address(creditor),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String financingSeq(BigInteger rId, String bank, String creditor, BigInteger amount) {
        final Function function = new Function(
                FUNC_FINANCING, 
                Arrays.<Type>asList(new Uint256(rId),
                new Address(bank),
                new Address(creditor),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public RemoteCall<Tuple5<String, String, BigInteger, Boolean, Boolean>> companys(String param0) {
        final Function function = new Function(FUNC_COMPANYS, 
                Arrays.<Type>asList(new Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple5<String, String, BigInteger, Boolean, Boolean>>(
                new Callable<Tuple5<String, String, BigInteger, Boolean, Boolean>>() {
                    @Override
                    public Tuple5<String, String, BigInteger, Boolean, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, BigInteger, Boolean, Boolean>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (Boolean) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue());
                    }
                });
    }

    public List<SignEventResponse> getSignEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SIGN_EVENT, transactionReceipt);
        ArrayList<SignEventResponse> responses = new ArrayList<SignEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SignEventResponse typedResponse = new SignEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.rId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.obligor = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.creditor = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.certifier = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerSignEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SIGN_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerSignEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SIGN_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.rId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerTransferEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSFER_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerTransferEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TRANSFER_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<FinanceEventResponse> getFinanceEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(FINANCE_EVENT, transactionReceipt);
        ArrayList<FinanceEventResponse> responses = new ArrayList<FinanceEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            FinanceEventResponse typedResponse = new FinanceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.rId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.creditor = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerFinanceEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(FINANCE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerFinanceEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(FINANCE_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<SelectEventResponse> getSelectEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SELECT_EVENT, transactionReceipt);
        ArrayList<SelectEventResponse> responses = new ArrayList<SelectEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SelectEventResponse typedResponse = new SelectEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerSelectEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SELECT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerSelectEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SELECT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static ChainServer_v2 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ChainServer_v2(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ChainServer_v2 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ChainServer_v2(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ChainServer_v2 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ChainServer_v2(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ChainServer_v2 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ChainServer_v2(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ChainServer_v2> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ChainServer_v2.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<ChainServer_v2> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ChainServer_v2.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ChainServer_v2> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ChainServer_v2.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ChainServer_v2> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ChainServer_v2.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class SignEventResponse {
        public Log log;

        public BigInteger rId;

        public String obligor;

        public String creditor;

        public BigInteger amount;

        public String certifier;
    }

    public static class TransferEventResponse {
        public Log log;

        public BigInteger rId;

        public String sender;

        public String receiver;

        public BigInteger amount;
    }

    public static class FinanceEventResponse {
        public Log log;

        public BigInteger rId;

        public String creditor;

        public BigInteger amount;
    }

    public static class SelectEventResponse {
        public Log log;

        public BigInteger ret;
    }
}
